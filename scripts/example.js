// Generated by CoffeeScript 1.9.3
(function() {

  var zendesk = require('node-zendesk');

  var client = zendesk.createClient({
    username:  's@cognits.co',
    token:     'WRSeQ0RomdSaWko4jv2I9XimGokh2EvKPHGHi5ct',
    remoteUri: 'https://cognits.zendesk.com/api/v2/',
    oauth: false
  });


  //
  // client.tickets.exportAudit(33, function(err, req, res){
  //   console.log("EXPORT AUDITS");
  //   console.log(err);
  //   console.log(req);
  //   console.log(res[2].events);
  // });

  function zendeskError(err) {
    console.log(err);
    // process.exit(-1);
  }


  function sortCommentsByDate(a, b) {
    if (a.created_at > b.created_at) return 1;
    if (a.created_at < b.created_at) return -1;
  }


  module.exports = function(robot) {


    robot.hear(/(.*)/i, function(res) {

      console.log("GETTING GENERAL MESSAGE");

      var slackUser = res.message.user;
      var slack = res.message.rawMessage;

      var user = robot.brain.get(slackUser.id);
      if (!user) user = slackUser;

      console.log("User: " + user.name + " is talking to me.");
      // var r = /i need|get me|send me|do (.*)/i;

      // Save all user message to a variable
      var text = res.match[0];
      console.log("heard: " + text);

      // Check if message is not to close task, if so, return and do nothing.
      // This is handled in another robot.hear method
      if (text.match(/close task|status|good job/i)) {
        return;
      }

      // User state flow. If null or idle, change to active and create ticket
      // for zendesk
      if (user.state == null | user.state == 'idle') {
        console.log("user is idle");

        var ticket = {
               "ticket":
                 {
                   "subject": "Desing Task for " + user.name + " -" + slack.user + "-" + slack.team,
                   "comment": { "body": text },
                   "type": "task",
                   "priority": "normal",
                   "tags": ["design", "" + slack.user, "" + slack.team, "" + user.real_name, "" + user.email_address]
                 }
             };

        // Now user becomes active
        user.state = "active";
        user.tmp_ticket = ticket;
        robot.brain.set(user.id, user);

        return res.send('Hi ' + user.name + '! I\'ve started a new task for you. Share all the files relevant to the task and a detailed description of what you need done.');

      } else if (user.state == 'active') {
        console.log("user is active");

        // check for UNFURL images and other medias and send them
        // like attachments
        if (res.message.rawMessage.upload) {
          user.tmp_ticket.ticket.comment.body += "| IMAGE: " + res.message.rawMessage.file.url;
        } else {
          // Add new messages to task description
          user.tmp_ticket.ticket.comment.body += " | " + text;
        }
        return res.send('Processed. Anything else I need to keep in mind (I mean memory)? If that\'s all, just type <close task> and I\'ll start working on it immediatley.');
      } else if (user.state == 'waiting') {
        // TODO still missing complete workflow when user is in WAITING state



      }


      return;
    });


    robot.hear(/close task/i, function(res) {

      var slackUser = res.message.user;
      var slack = res.message.rawMessage;

      var user = robot.brain.get(slackUser.id);

      // User state cannot be idle when closing a task.
      if (user.state == 'idle') {
        return res.send('I have no open tasks right now. If you want to start a new one, just tell me what you need.');

      } else if (user.state == 'active') {
        console.log("Closing task for: " + user.name);

        // Save ticket in Zendesk
        client.tickets.create(user.tmp_ticket,  function(err, req, result) {
          if (err) return zendeskError(err);

          if (user.tickets) {
            user.tickets.push(result);
          } else {
            user.tickets = [result];
          }

          // Update user object in Robot brain
          // and remove tmp ticket
          delete user.tmp_ticket;
          user.state = 'waiting';

          user.lastChatTime = new Date();
          robot.brain.set(slackUser.id, user);

          console.log("Creating interval calls for ticket: " + result.id);
          return setInterval(function() {

            // TODO check callback function return perameters don't conflict with
            // higher scope variables!
            client.tickets.getComments(result.id, function(err, req, comments){

              if(err) {
                console.log(err);
                return;
              }

              var comments = comments[0].comments;
              if (comments.length <= 1) return;

              // check comments time to only send latest messages to user
              var d, comment;
              for (var i = 0; i < comments.length; i++) {
                comment = comments[i];

                d = new Date(comment.created_at);
                if (d > user.lastChatTime) {

                  if (comment.attachments.length > 0 ) {
                    for (var j = 0; j < comment.attachments.length; j++) {
                      res.send(comment.attachments[j].content_url);
                    }
                  }
                  res.send(comment.body);
                }
              }
              user.lastChatTime = new Date();
              return;
            });

          }, 30 * 1000);
        });

        return res.send('Success ' + user.name + '! Task closed.');

      }
      return;
    });

    robot.hear(/good job|great job|i'm satisfied with my care/i, function(res) {

    });

    robot.hear(/status/i, function(res) {

      var slackUser = res.message.user;
      var user = robot.brain.get(slackUser.id);

      return res.send('Hi ' + user.name + '. The current status is: ' + user.state)
    });

  //   var annoyIntervalId, answer, enterReplies, leaveReplies, lulz;
  //
  //
    // robot.hear(/badger/i, function(res) {
    //   return res.send("Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS");
    // });
  //
  //   robot.respond(/open the (.*) doors/i, function(res) {
  //     var doorType;
  //     doorType = res.match[1];
  //     if (doorType === "pod bay") {
  //       return res.reply("I'm afraid I can't let you do that.");
  //     } else {
  //       return res.reply("Opening " + doorType + " doors");
  //     }
  //   });
  //
  //
  //   robot.hear(/I like pie/i, function(res) {
  //     return res.emote("makes a freshly baked pie");
  //   });
  //   lulz = ['lol', 'rofl', 'lmao'];
  //   robot.respond(/lulz/i, function(res) {
  //     return res.send(res.random(lulz));
  //   });
  //   robot.topic(function(res) {
  //     return res.send(res.message.text + "? That's a Paddlin'");
  //   });
  //   enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you'];
  //   leaveReplies = ['Are you still there?', 'Target lost', 'Searching'];
  //   robot.enter(function(res) {
  //     return res.send(res.random(enterReplies));
  //   });
  //   robot.leave(function(res) {
  //     return res.send(res.random(leaveReplies));
  //   });
  //   answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING;
  //   robot.respond(/what is the answer to the ultimate question of life/, function(res) {
  //     if (answer == null) {
  //       res.send("Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again");
  //       return;
  //     }
  //     return res.send(answer + ", but what is the question?");
  //   });
  //   robot.respond(/you are a little slow/, function(res) {
  //     return setTimeout(function() {
  //       return res.send("Who you calling 'slow'?");
  //     }, 60 * 1000);
  //   });
  //   annoyIntervalId = null;
  //   robot.respond(/annoy me/, function(res) {
  //     if (annoyIntervalId) {
  //       res.send("AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH");
  //       return;
  //     }
  //     res.send("Hey, want to hear the most annoying sound in the world?");
  //     return annoyIntervalId = setInterval(function() {
  //       return res.send("AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH");
  //     }, 1000);
  //   });
  //   robot.respond(/unannoy me/, function(res) {
  //     if (annoyIntervalId) {
  //       res.send("GUYS, GUYS, GUYS!");
  //       clearInterval(annoyIntervalId);
  //       return annoyIntervalId = null;
  //     } else {
  //       return res.send("Not annoying you right now, am I?");
  //     }
  //   });
  //   robot.router.post('/hubot/chatsecrets/:room', function(req, res) {
  //     var data, room, secret;
  //     room = req.params.room;
  //     data = JSON.parse(req.body.payload);
  //     secret = data.secret;
  //     robot.messageRoom(room, "I have a secret: " + secret);
  //     return res.send('OK');
  //   });
  //   robot.error(function(err, res) {
  //     robot.logger.error("DOES NOT COMPUTE");
  //     if (res != null) {
  //       return res.reply("DOES NOT COMPUTE");
  //     }
  //   });
  //   robot.respond(/have a soda/i, function(res) {
  //     var sodasHad;
  //     sodasHad = robot.brain.get('totalSodas') * 1 || 0;
  //     if (sodasHad > 4) {
  //       return res.reply("I'm too fizzy..");
  //     } else {
  //       res.reply('Sure!');
  //       return robot.brain.set('totalSodas', sodasHad + 1);
  //     }
  //   });
  //   return robot.respond(/sleep it off/i, function(res) {
  //     robot.brain.set('totalSodas', 0);
  //     return res.reply('zzzzz');
  //   });


  };

}).call(this);
