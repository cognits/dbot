// Generated by CoffeeScript 1.9.3
(function() {

  var zendesk = require('node-zendesk');

  var client = zendesk.createClient({
    username:  's@cognits.co',
    token:     'WRSeQ0RomdSaWko4jv2I9XimGokh2EvKPHGHi5ct',
    remoteUri: 'https://cognits.zendesk.com/api/v2/',
    oauth: false
  });

  client.tickets.getComments(33, function(err, req, res){
    console.log("GET COMMENTS");
    console.log(err);
    console.log(req);
    console.log(res[0].comments);
  });

  client.tickets.exportAudit(33, function(err, req, res){
    console.log("EXPORT AUDITS");
    console.log(err);
    console.log(req);
    console.log(res[2].events);
  });

  function zendeskError(err) {
    console.log(err);
    // process.exit(-1);
  }


  function auditTicket(ticketId) {

  }


  module.exports = function(robot) {

    robot.hear(/new task/i, function(res) {

      console.log(res);
      var user = res.message.user;
      var userState = robot.brain.get(user.id + 'State');

      if (userState == 'active') {
        return res.send('You already have an active task, close it by typing <close task>');

      } else if (userState == 'idle' | userState == undefined) {

        // Set user state to active. Only one task per user at a given time.
        robot.brain.set( user.id + 'State', 'active');
        return res.send('Would love to ' + user.name + '. Please describe the task');
      }
      return;
    });

    robot.hear(/i need|get me|send me|do (.*)/i, function(res) {

      var user = res.message.user;
      var slack = res.message.rawMessage;
      var userState = robot.brain.get(user.id + 'State');

      var description = res.match[0];
      console.log(res.match);

      if (userState == 'idle' | userState == undefined) {
        return res.send('Hi, first create a new task by typing <new task>');

      } else if (userState == 'active') {

        // Set user state to active. Only one task per user at a given time.
        var ticket = {
               "ticket":
                 {
                   "subject": "Desing Task for " + user.name + " -" + slack.user + "-" + slack.team,
                   "comment": { "body": description },
                   "type": "task",
                   "priority": "normal",
                   "tags": ["design", "" + slack.user, "" + slack.team, "" + user.real_name, "" + user.email_address]
                 }
             };

        client.tickets.create(ticket,  function(err, req, result) {
          if (err) return zendeskError(err);
          console.log(JSON.stringify(result, null, 2, true));
        });
      }
      return;
    });

    robot.hear(/close task/i, function(res) {

      var user = res.message.user;
      var userState = robot.brain.get(user.id + 'State');

      if (userState == 'idle') {
        return res.send('Hi, first create a new task by typing <new task>');

      } else if (userState == 'active' | userState == undefined) {

        // Set user state to active. Only one task per user at a given time.
        robot.brain.set( user.id + 'State', 'idle');
        return res.send('Success ' + user.name + '! Task closed.');

        return setInterval(function() {
          return res.send("Who you calling 'slow'?");
        }, 60 * 1000);
      }
      return;
    });

    robot.hear(/status/i, function(res) {

      var user = res.message.user;
      var userState = robot.brain.get(user.id + 'State');

      return res.send('Hi ' + user.name + '. The current status is: ' + userState)
    });

  //   var annoyIntervalId, answer, enterReplies, leaveReplies, lulz;
  //
  //
    robot.hear(/badger/i, function(res) {
      return res.send("Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS");
    });
  //
  //   robot.respond(/open the (.*) doors/i, function(res) {
  //     var doorType;
  //     doorType = res.match[1];
  //     if (doorType === "pod bay") {
  //       return res.reply("I'm afraid I can't let you do that.");
  //     } else {
  //       return res.reply("Opening " + doorType + " doors");
  //     }
  //   });
  //
  //
  //   robot.hear(/I like pie/i, function(res) {
  //     return res.emote("makes a freshly baked pie");
  //   });
  //   lulz = ['lol', 'rofl', 'lmao'];
  //   robot.respond(/lulz/i, function(res) {
  //     return res.send(res.random(lulz));
  //   });
  //   robot.topic(function(res) {
  //     return res.send(res.message.text + "? That's a Paddlin'");
  //   });
  //   enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you'];
  //   leaveReplies = ['Are you still there?', 'Target lost', 'Searching'];
  //   robot.enter(function(res) {
  //     return res.send(res.random(enterReplies));
  //   });
  //   robot.leave(function(res) {
  //     return res.send(res.random(leaveReplies));
  //   });
  //   answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING;
  //   robot.respond(/what is the answer to the ultimate question of life/, function(res) {
  //     if (answer == null) {
  //       res.send("Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again");
  //       return;
  //     }
  //     return res.send(answer + ", but what is the question?");
  //   });
  //   robot.respond(/you are a little slow/, function(res) {
  //     return setTimeout(function() {
  //       return res.send("Who you calling 'slow'?");
  //     }, 60 * 1000);
  //   });
  //   annoyIntervalId = null;
  //   robot.respond(/annoy me/, function(res) {
  //     if (annoyIntervalId) {
  //       res.send("AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH");
  //       return;
  //     }
  //     res.send("Hey, want to hear the most annoying sound in the world?");
  //     return annoyIntervalId = setInterval(function() {
  //       return res.send("AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH");
  //     }, 1000);
  //   });
  //   robot.respond(/unannoy me/, function(res) {
  //     if (annoyIntervalId) {
  //       res.send("GUYS, GUYS, GUYS!");
  //       clearInterval(annoyIntervalId);
  //       return annoyIntervalId = null;
  //     } else {
  //       return res.send("Not annoying you right now, am I?");
  //     }
  //   });
  //   robot.router.post('/hubot/chatsecrets/:room', function(req, res) {
  //     var data, room, secret;
  //     room = req.params.room;
  //     data = JSON.parse(req.body.payload);
  //     secret = data.secret;
  //     robot.messageRoom(room, "I have a secret: " + secret);
  //     return res.send('OK');
  //   });
  //   robot.error(function(err, res) {
  //     robot.logger.error("DOES NOT COMPUTE");
  //     if (res != null) {
  //       return res.reply("DOES NOT COMPUTE");
  //     }
  //   });
  //   robot.respond(/have a soda/i, function(res) {
  //     var sodasHad;
  //     sodasHad = robot.brain.get('totalSodas') * 1 || 0;
  //     if (sodasHad > 4) {
  //       return res.reply("I'm too fizzy..");
  //     } else {
  //       res.reply('Sure!');
  //       return robot.brain.set('totalSodas', sodasHad + 1);
  //     }
  //   });
  //   return robot.respond(/sleep it off/i, function(res) {
  //     robot.brain.set('totalSodas', 0);
  //     return res.reply('zzzzz');
  //   });


  };

}).call(this);
